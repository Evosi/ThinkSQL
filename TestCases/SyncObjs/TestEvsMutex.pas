unit TestEvsMutex;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}
{$IFDEF WIN32}{$DEFINE WINDOWS}{$ENDIF}
interface

uses
  TestFramework, sysutils, windows, uEvsSyncObjs;

type
  // Test methods for class TEvsMutex
  
  TestTEvsMutex = class(TTestCase)
  strict private
    FMutex: TEvsMutex;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAcquire;
    procedure TestRelease;
    procedure TestTryAcquire;
    procedure TestEnter;
    procedure TestLeave;
    procedure TestReEnter;
  end;

implementation
uses uevsThreadTestUtils;

{$IFDEF WINDOWS}
type
  NTSTATUS = Longint;

  _SEMAPHORE_INFORMATION_CLASS = (SemaphoreBasicInformation);
  SEMAPHORE_INFORMATION_CLASS  = _SEMAPHORE_INFORMATION_CLASS;
  TSemaphoreInformationClass   = SEMAPHORE_INFORMATION_CLASS;

  _SEMAPHORE_BASIC_INFORMATION = record
    CurrentCount: LongInt;
    MaximumCount: LongInt;
  end;
  SEMAPHORE_BASIC_INFORMATION  = _SEMAPHORE_BASIC_INFORMATION;
  PSEMAPHORE_BASIC_INFORMATION = ^SEMAPHORE_BASIC_INFORMATION;
  TSemaphoreBasicInformation   = SEMAPHORE_BASIC_INFORMATION;


function  NtQuerySemaphore( SemaphoreHandle : THANDLE; SemaphoreInformationClass : SEMAPHORE_INFORMATION_CLASS; SemaphoreInformation : Pointer;
                            SemaphoreInformationLength : ULONG; ResultLength : PULONG): NTSTATUS; stdcall; external  'ntdll.dll';

function SemGetValue(aSem:TSemaphoreHandle):Integer;{$IFDEF WINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
var
  vSemInfo : TSemaphoreBasicInformation;
  ntStatus : Integer;
  vLen     : Integer;
begin
  Result := -1;
  ntStatus := NtQuerySemaphore(aSem, SemaphoreBasicInformation, @vSemInfo, SizeOf(vSemInfo), @vLen);
  if ntStatus = 0 then Result := vSemInfo.CurrentCount else RaiseLastOSError;
end;
{$ENDIF}

procedure TestTEvsMutex.SetUp;
begin
  FMutex := TEvsMutex.Create;
end;

procedure TestTEvsMutex.TearDown;
begin
  FMutex.Free;
  FMutex := nil;
end;

procedure TestTEvsMutex.TestAcquire;
begin
  CheckFalse(IsMutexLocked(FMutex), 'Secondary thread can''t take control!!');
//  CheckEquals(1, SemGetValue(FMutex.Handle.Handle),'Not relaesed.');
  FMutex.Acquire;
//  CheckNotEquals(1, SemGetValue(FMutex.Handle.Handle),'Not relaesed.');
//  CheckEquals(0, SemGetValue(FMutex.Handle.Handle),'Not relaesed.');
//  Sleep(10); //this should not be needed.
  CheckTrue(IsMutexLocked(FMutex), 'Secondary thread took control!!');
end;

procedure TestTEvsMutex.TestReEnter;
begin
  CheckFalse(IsMutexLocked(FMutex), 'Secondary thread can''t take control!!');
  FMutex.Enter;
  CheckTrue(IsMutexLocked(FMutex), 'Secondary thread took control!!');
  CheckTrue(FMutex.TryAcquire(10));
  CheckTrue(FMutex.TryAcquire(10));
  CheckTrue(FMutex.TryAcquire(10));
  CheckTrue(FMutex.TryAcquire(10));
  CheckTrue(IsMutexLocked(FMutex), 'Secondary thread took control!!');
  FMutex.Leave;
  CheckTrue(IsMutexLocked(FMutex), 'Secondary thread took control!!');
  FMutex.Leave;
  CheckTrue(IsMutexLocked(FMutex), 'Secondary thread took control!!');
  FMutex.Leave;
  CheckTrue(IsMutexLocked(FMutex), 'Secondary thread took control!!');
  FMutex.Leave;
  CheckTrue(IsMutexLocked(FMutex), 'Secondary thread took control!!');
  FMutex.Leave;
  CheckFalse(IsMutexLocked(FMutex), 'Secondary thread took control!!');
end;

procedure TestTEvsMutex.TestRelease;
begin
  FMutex.Acquire;
  CheckTrue(IsMutexLocked(FMutex), 'Secondary thread took control!!');
  FMutex.Release;
  CheckFalse(IsMutexLocked(FMutex), 'Secondary thread can''t take control!!');
end;

procedure TestTEvsMutex.TestTryAcquire;
var
  vObj:Pointer;
begin
  CheckEquals(1, SemGetValue(FMutex.Handle.Handle),'Not relaesed.');
  vObj := LockObject(FMutex);
  CheckEquals(0, SemGetValue(FMutex.Handle.Handle),'Not relaesed.');
  CheckFalse(FMutex.TryAcquire(10));
  ReleaseLock(vObj);
  CheckTrue(FMutex.TryAcquire(10));
  CheckTrue(IsMutexLocked(FMutex));
  FMutex.Release;
end;

procedure TestTEvsMutex.TestEnter;
begin
  CheckEquals(1, SemGetValue(FMutex.Handle.Handle),'Not relaesed.');
  CheckFalse(IsMutexLocked(FMutex), 'Secondary thread can''t take control!!');
  FMutex.Enter;
  CheckTrue(IsMutexLocked(FMutex), 'Secondary thread took control!!');
end;

procedure TestTEvsMutex.TestLeave;
begin
  FMutex.Enter;
  CheckTrue(IsMutexLocked(FMutex), 'Secondary thread took control!!');
  FMutex.Leave;
  CheckFalse(IsMutexLocked(FMutex), 'Secondary thread can''t take control!!');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTEvsMutex.Suite);
end.

